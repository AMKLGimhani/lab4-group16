trigger:
- main  # Trigger pipeline on commits to main branch

pool:
  vmImage: 'ubuntu-latest'  # Use Ubuntu build agent

variables:
  acrLoginServer: 'group16acr.azurecr.io'
  imageRepository: 'lab4-group16'
  tag: '$(Build.BuildId)'
  webAppName: 'Webappgrp16'

steps:
# Build and push Docker image
- script: |
    # Login to ACR
    echo $(acrPassword) | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
    
    # Build the docker image
    docker build -t $(acrLoginServer)/$(imageRepository):$(tag) .
    
    # Push to ACR
    docker push $(acrLoginServer)/$(imageRepository):$(tag)
  displayName: 'Build and push Docker image'

# Deploy using WebDeploy (MSDeploy)
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'PublishProfile'
    PublishProfilePath: '$(System.DefaultWorkingDirectory)/publishprofile.xml'
    appType: 'webAppContainer'
    WebAppName: 'Webappgrp16'
    DockerNamespace: '$(acrLoginServer)'
    DockerRepository: '$(imageRepository)'
    DockerImageTag: '$(tag)'
    AppSettings: '-DOCKER_REGISTRY_SERVER_URL https://$(acrLoginServer) -DOCKER_REGISTRY_SERVER_USERNAME $(acrUsername) -DOCKER_REGISTRY_SERVER_PASSWORD $(acrPassword)'
  displayName: 'Deploy to Azure Web App'

# Alternate deployment method using cURL if the above fails
- script: |
    # Setup container config
    CONTAINER_SETTINGS='{
      "properties": {
        "linuxFxVersion": "DOCKER|$(acrLoginServer)/$(imageRepository):$(tag)"
      }
    }'
    
    # Encode credentials for Basic Auth
    AUTH=$(echo -n "$Webappgrp16:$(publishProfilePassword)" | base64)
    
    # Update container settings via Kudu API
    curl -X PUT \
      "https://webappgrp16-cwdqddeqesapa6eq.scm.northeurope-01.azurewebsites.net/api/settings" \
      -H "Authorization: Basic $AUTH" \
      -H "Content-Type: application/json" \
      -d "$CONTAINER_SETTINGS"
      
    # Restart the app
    curl -X POST \
      "https://webappgrp16-cwdqddeqesapa6eq.scm.northeurope-01.azurewebsites.net/api/restart" \
      -H "Authorization: Basic $AUTH"
  displayName: 'Alternate deployment method'
  condition: always() # Run even if previous step fails