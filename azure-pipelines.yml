trigger:
- main  # Trigger pipeline on commits to main branch

pool:
  vmImage: 'ubuntu-latest'  # Use Ubuntu build agent

variables:
  acrLoginServer: 'group16acr.azurecr.io'
  imageRepository: 'lab4-group16'
  tag: '$(Build.BuildId)'
  webAppName: 'Webappgrp16'
  cacheBust: '$(Build.BuildNumber)'

steps:
# Display current directory contents for debugging
- script: |
    echo "Current directory contents:"
    ls -la
    if [ -f index.html ]; then
      echo "Content of index.html:"
      cat index.html
    else
      echo "index.html not found!"
    fi
  displayName: 'Debug - Show Files'

# Build and push Docker image with no-cache option
- script: |
    # Login to ACR
    echo $(acrPassword) | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
    
    # Build the docker image with CACHE_BUST to prevent caching
    docker build --no-cache --build-arg CACHE_BUST=$(cacheBust) -t $(acrLoginServer)/$(imageRepository):$(tag) -t $(acrLoginServer)/$(imageRepository):latest .
    
    # Push to ACR with both tags
    docker push $(acrLoginServer)/$(imageRepository):$(tag)
    docker push $(acrLoginServer)/$(imageRepository):latest
  displayName: 'Build and push Docker image'

# Deploy using direct API calls to Kudu with timestamp for cache busting
- script: |
    # Setup container config with timestamp to force refresh
    TIMESTAMP=$(date +%s)
    CONTAINER_SETTINGS='{
      "properties": {
        "linuxFxVersion": "DOCKER|$(acrLoginServer)/$(imageRepository):$(tag)?t=$TIMESTAMP",
        "appCommandLine": "",
        "appSettings": [
          {
            "name": "DOCKER_REGISTRY_SERVER_URL",
            "value": "https://$(acrLoginServer)"
          },
          {
            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
            "value": "$(acrUsername)"
          },
          {
            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
            "value": "$(acrPassword)"
          },
          {
            "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
            "value": "600"
          },
          {
            "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
            "value": "false"
          }
        ]
      }
    }'
    
    # Encode credentials for Basic Auth
    AUTH=$(echo -n "$(publishProfileUsername):$(publishProfilePassword)" | base64)
    
    # Update container settings via Kudu API
    curl -X PUT \
      "https://webappgrp16-cwdqddeqesapa6eq.scm.northeurope-01.azurewebsites.net/api/settings" \
      -H "Authorization: Basic $AUTH" \
      -H "Content-Type: application/json" \
      -d "$CONTAINER_SETTINGS"
      
    # Restart the app
    curl -X POST \
      "https://webappgrp16-cwdqddeqesapa6eq.scm.northeurope-01.azurewebsites.net/api/restart" \
      -H "Authorization: Basic $AUTH"
    
    echo "Deployment completed with timestamp: $TIMESTAMP"
    echo "Container image: $(acrLoginServer)/$(imageRepository):$(tag)"
  displayName: 'Deploy to Azure Web App using Kudu API'

# Verify deployment
- script: |
    echo "Waiting 30 seconds for deployment to complete..."
    sleep 30
    
    echo "Verifying deployment by checking the website..."
    curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" https://webappgrp16-cwdqddeqesapa6eq.northeurope-01.azurewebsites.net/
  displayName: 'Verify Deployment'